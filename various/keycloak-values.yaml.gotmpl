global:
  storageClass: {{ .Values.defaultStorageClass }}
  security:
    allowInsecureImages: true
postgresql:
  enabled: false
  # auth:
  #   password: jfKEFOEwyF
  #   postgresPassword: jfKEFOEwyF
ingress:
  enabled: true
  ingressClassName: nginx
  hostname: identity-pcd{{ if ne .Environment.Name "prd" }}-{{ .Environment.Name }}{{ end }}.cultura.gov.it
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: {{ if eq .Environment.Name "prd" }}"letsencrypt-prd"{{ else }}"my-internal-ca"{{ end }}
    cert-manager.io/common-name: identity-pcd{{ if ne .Environment.Name "prd" }}-{{ .Environment.Name }}{{ end }}.cultura.gov.it
    cert-manager.io/subject-organizationalunits: ACS IT
    cert-manager.io/subject-organizations: ACS
  tls: true
  selfSigned: true
auth:
  adminUser: admin
  adminPassword: jfKEFOEwyF
keycloakConfigCli:
  configuration:
    master.json: |
      {
        "realm" : "master"
      }
    ACS.json: |
      {
        "realm" : "ACS"
      }
# valori per riutilizzare il postgres che gi√† abbiamo, cancellare global.postgresql.auth e mettere global.postgresql.enabled=false
externalDatabase:
  host: {{ .Values.keycloak.externalDatabase.host }}
  port: {{ .Values.keycloak.externalDatabase.port }}
  user: {{ .Values.keycloak.externalDatabase.user }}
  password: {{ .Values.keycloak.externalDatabase.password }}
  database: {{ .Values.keycloak.externalDatabase.database }}

replicaCount: {{ if or (eq .Environment.Name "prd") (eq .Environment.Name "col") }}2{{ else }}1{{ end }}

proxy: "edge"

tls:
  enabled: true
  autoGenerated: true

image:
  registry: harbor-devops.pcdacs.local
  repository: acs-test/keycloak
  tag: 26.2.4-debian-12-r0-acs
  pullSecrets:
    - harborpullsecret